// Gradle script to build and run the "java-apps" subproject of Sport Jolt

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

application {
    mainClass = 'com.github.stephengold.sportjolt.javaapp.AppChooser'
}
if (!hasProperty('mainClass')) {
    ext.mainClass = application.mainClass
}
jar.manifest.attributes('Main-Class': application.mainClass)

// Register tasks to run specific applications:

tasks.register('AppChooser', JavaExec) {
    description = 'Runs the AppChooser app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.AppChooser'
}

//   physics demos in Java:
tasks.register('Botany') {
    description = 'Runs the Botany demo app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.Botany'
}
tasks.register('MarbleGame', JavaExec) {
    description = 'Runs the MarbleGame app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.MarbleGame'
}
tasks.register('NewtonsCradle', JavaExec) {
    description = 'Runs the NewtonsCradle demo app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.NewtonsCradle'
}
tasks.register('Pachinko', JavaExec) {
    description = 'Runs the Pachinko demo app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.Pachinko'
}
tasks.register('ThousandCubes', JavaExec) {
    description = 'Runs the ThousandCubes demo app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.ThousandCubes'
}
tasks.register('Windlass', JavaExec) {
    description = 'Runs the Windlass demo app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.demo.Windlass'
}

//   generate images for use in the tutorial:
tasks.register('ShapeImages', JavaExec) {
    description = 'Runs the ShapeImages image generator.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.image.ShapeImages'
}

//   non-physics test apps in Java:
tasks.register('AssimpTest', JavaExec) {
    description = 'Runs the Assimp test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.AssimpTest'
}
tasks.register('CheckerboardTest', JavaExec) {
    description = 'Runs the checkerboard test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.CheckerboardTest'
}
tasks.register('ClipspaceTest', JavaExec) {
    description = 'Runs the clipspace test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.ClipspaceTest'
}
tasks.register('DynamicMeshTest', JavaExec) {
    description = 'Runs the dynamic-mesh test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.DynamicMeshTest'
}
tasks.register('IcosphereTest', JavaExec) {
    description = 'Runs the icosphere test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.IcosphereTest'
}
tasks.register('MouseTest', JavaExec) {
    description = 'Runs the first mouse test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.MouseTest'
}
tasks.register('MouseTest2', JavaExec) {
    description = 'Runs the 2nd mouse test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.MouseTest2'
}
tasks.register('OctasphereTest', JavaExec) {
    description = 'Runs the octasphere test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.OctasphereTest'
}
tasks.register('RainbowTest', JavaExec) {
    description = 'Runs the rainbow test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.RainbowTest'
}
tasks.register('SpriteTest', JavaExec) {
    description = 'Runs the sprite test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.SpriteTest'
}
tasks.register('TextureTest', JavaExec) {
    description = 'Runs the texture test app.'
    mainClass = 'com.github.stephengold.sportjolt.javaapp.test.TextureTest'
}

Boolean assertions = rootProject.getProperty('assertions').equals('true')

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
Boolean includeLinux = os.isLinux()
Boolean includeMacOsX = os.isMacOsX()
Boolean includeWindows = os.isWindows()
Boolean enableNativeAccess = JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)

tasks.withType(JavaExec).configureEach { // Java runtime options:
    if (os.isMacOsX()) {
        jvmArgs '-XstartOnFirstThread' // required for GLFW on macOS
    }
    classpath sourceSets.main.runtimeClasspath
    enableAssertions = assertions
    if (enableNativeAccess) {
        jvmArgs '--enable-native-access=ALL-UNNAMED' // suppress System::load() warning
    }
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

dependencies {
    implementation(libs.log4j.impl)
    implementation(libs.oshi.core)

    if (includeLinux) {
        runtimeOnly(variantOf(libs.jolt.jni.linux64){classifier(btf)})
        runtimeOnly(variantOf(libs.jolt.jni.linux64fma){classifier(btf)})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-linux")})

        runtimeOnly(variantOf(libs.jolt.jni.linuxarm64){classifier(btf)})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-linux-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-linux-arm64")})
    }

    if (includeMacOsX) {
        runtimeOnly(variantOf(libs.jolt.jni.macosx64){classifier(btf)})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-macos")})

        runtimeOnly(variantOf(libs.jolt.jni.macosxarm64){classifier(btf)})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-macos-arm64")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-macos-arm64")})
    }

    if (includeWindows) {
        runtimeOnly(variantOf(libs.jolt.jni.windows64){classifier(btf)})
        runtimeOnly(variantOf(libs.jolt.jni.windows64avx2){classifier(btf)})

        runtimeOnly(variantOf(libs.lwjgl){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.assimp){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.glfw){classifier("natives-windows")})
        runtimeOnly(variantOf(libs.lwjgl.opengl){classifier("natives-windows")})
    }

    //implementation 'com.github.stephengold:sport-jolt:' + sjVersion // for published library
    implementation project(':library') // for latest sourcecode
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
